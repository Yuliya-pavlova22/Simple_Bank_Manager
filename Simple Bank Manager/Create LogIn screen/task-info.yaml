type: edu
files:
- name: src/main/java/org/hyperskill/simplebankmanager/MainActivity.kt
  visible: true
  text: |
    package org.hyperskill.simplebankmanager

    import androidx.appcompat.app.AppCompatActivity
    import android.os.Bundle

    class MainActivity : AppCompatActivity() {
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
        }
    }
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  learner_created: false
- name: src/main/res/values/themes.xml
  visible: true
  learner_created: false
- name: src/main/res/values-night/themes.xml
  visible: true
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  learner_created: false
- name: src/test/java/org/hyperskill/simplebankmanager/internals/screen/LoginScreen.kt
  visible: false
  text: |-
    package org.hyperskill.simplebankmanager.internals.screen


    import android.app.Activity
    import android.text.InputType
    import android.widget.Button
    import android.widget.EditText
    import android.widget.Toast
    import org.hyperskill.simplebankmanager.internals.SimpleBankManagerUnitTest
    import org.junit.Assert.assertNull
    import org.robolectric.shadows.ShadowToast

    class LoginScreen<T: Activity>(private val test: SimpleBankManagerUnitTest<T>) {

        val loginUsername : EditText = with(test) {
            val id = "loginUsername"

            activity.findViewByString<EditText>(id).apply {
                assertEditText(
                    idString = id,
                    expectedHint = "username",
                    expectedType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PERSON_NAME,
                    typeString = "textPersonName"
                )
            }
        }

        val loginPassword : EditText = with(test) {
            val id = "loginPassword"
            activity.findViewByString<EditText>(id).apply {
                assertEditText(
                    idString = id,
                    expectedHint = "password",
                    expectedType = InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_VARIATION_PASSWORD,
                    typeString = "numberPassword"
                )
            }
        }

        val loginButton : Button = with(test) {
            val idString = "loginButton"
            val expectedText = "log in"
            activity.findViewByString<Button>(idString).apply {
                assertButtonText(idString, expectedText)
            }
        }



        fun assertLogin(
            caseDescription: String,
            username: String = "Lara",
            password: String = "1234",
            isSucceeded: Boolean = true,
        ) {
            with(test) {
                loginUsername.setText(username)
                loginPassword.setText(password)

                val latestToast: Toast? = ShadowToast.getLatestToast()
                assertNull("There should be no toast messages before loginButton is clicked",
                    latestToast)

                loginButton.clickAndRun()

                if(isSucceeded) {
                    val message = "Wrong toast message after successful login with $caseDescription"
                    assertLastToastMessageEquals(
                        message,
                        "logged in"
                    )
                } else {
                    val message = "Wrong toast message after unsuccessful login with $caseDescription"
                    assertLastToastMessageEquals(
                        message,
                        "invalid credentials"
                    )
                }
                ShadowToast.reset()
            }
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/simplebankmanager/internals/screen/UserMenuScreen.kt
  visible: false
  text: |-
    package org.hyperskill.simplebankmanager.internals.screen

    import android.widget.Button
    import android.widget.TextView
    import org.hyperskill.simplebankmanager.MainActivity
    import org.hyperskill.simplebankmanager.internals.SimpleBankManagerUnitTest

    class UserMenuScreen(private val test: SimpleBankManagerUnitTest<MainActivity>) {

        val userMenuWelcomeTextView : TextView = with(test) {
            activity.findViewByString("userMenuWelcomeTextView")
        }
        val userMenuViewBalanceButton : Button = with(test) {
            activity.findViewByString("userMenuViewBalanceButton")
        }
        val userMenuTransferFundsButton : Button = with(test) {
            activity.findViewByString("userMenuTransferFundsButton")
        }
        val userMenuExchangeCalculatorButton : Button = with(test) {
            activity.findViewByString("userMenuExchangeCalculatorButton")
        }
        val userMenuPayBillsButton : Button = with(test) {
            activity.findViewByString("userMenuPayBillsButton")
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/simplebankmanager/internals/AbstractUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.simplebankmanager.internals

    import android.app.Activity
    import android.app.AlertDialog
    import android.content.Intent
    import android.os.Bundle
    import android.view.View
    import org.junit.Assert.*
    import org.robolectric.Robolectric
    import org.robolectric.Shadows.shadowOf
    import org.robolectric.android.controller.ActivityController
    import org.robolectric.shadow.api.Shadow
    import org.robolectric.shadows.ShadowActivity
    import org.robolectric.shadows.ShadowAlertDialog
    import org.robolectric.shadows.ShadowLooper
    import org.robolectric.shadows.ShadowToast
    import java.time.Duration

    abstract class AbstractUnitTest<T : Activity>(clazz: Class<T>) {

        /**
         * Setup and control activities and their lifecycle
         */
        val activityController: ActivityController<T> by lazy {
            Robolectric.buildActivity(clazz)
        }

        /**
         * The activity being tested.
         *
         * It is the @RealObject of the shadowActivity
         */
        val activity : Activity by lazy {
            activityController.get()
        }

        /**
         * A Roboletric shadow object of the Activity class, contains helper methods to deal with
         * testing activities like setting permissions, peeking results of launched activities for result,
         * retrieving shown dialogs, intents and others.
         *
         * If you don't know what shadows are you can have a better understanding on that reading this
         * on roboletric documentation: http://robolectric.org/extending/
         *
         * Understanding Shadows is fundamental for Roboletric, things are not what they appear to be on
         * Roboletric because running a code on the jvm is not the same as running the code on a real/emulated device.
         * Code that expects to eventually talk to the machine won't have the machine they expect to have to talk to.
         * Shadow is how Roboletric makes things possible, they impersonate @RealObject and act when @RealObject is expected to act.
         *
         * Things in Roboletric are not what they appear to be.
         * It is possible to not notice it for the most part, but it will be essential for some other parts
         */
        val shadowActivity: ShadowActivity by lazy {
            Shadow.extract(activity)
        }

        /**
         * A Roboletric shadow object of the mainLooper. Handles enqueued runnables and also the passage of time.
         *
         * Usually used with .idleFor(someDurationValue) or .runToEndOfTasks()
         */
        val shadowLooper: ShadowLooper by lazy {
            shadowOf(activity.mainLooper)
        }

        /**
         * Decorate your test code with this method to ensure better error messages displayed
         * when tests are run with check button and exceptions are thrown by user implementation.
         *
         * returns a value for convenience use, like in tests that involve navigation between Activities
         */
        fun <ReturnValue> testActivity(arguments: Intent = Intent(), savedInstanceState: Bundle = Bundle(), testCodeBlock: (Activity) -> ReturnValue): ReturnValue {
            try {
                activity.intent =  arguments
                activityController.setup(savedInstanceState)
            } catch (ex: Exception) {
                throw AssertionError("Exception, test failed on activity creation with $ex\n${ex.stackTraceToString()}")
            }

            return try {
                testCodeBlock(activity)
            } catch (ex: Exception) {
                throw AssertionError("Exception. Test failed on activity execution with $ex\n${ex.stackTraceToString()}")
            }
        }


        /**
         * Use this method to retrieve the latest AlertDialog.
         *
         * The existence of such AlertDialog will be asserted before returning.
         *
         * Robolectric only supports android.app.AlertDialog, test will not be
         * able to find androidx.appcompat.app.AlertDialog.
         *
         * - Important!!! :
         * When writing stage description state explicitly the correct version that should be imported
         */
        fun getLatestDialog(): AlertDialog {
            val latestAlertDialog = ShadowAlertDialog.getLatestAlertDialog()

            assertNotNull(
                "There was no AlertDialog found. Make sure to import android.app.AlertDialog version",
                latestAlertDialog
            )

            return latestAlertDialog!!
        }

        /**
         * Use this method to perform clicks. It will also advance the clock millis milliseconds and run
         * enqueued Runnable scheduled to run on main looper in that timeframe.
         * Default value for millis is 500
         *
         * Internally it calls performClick() and shadowLooper.idleFor(millis)
         */
        fun View.clickAndRun(millis: Long = 500){
            this.performClick()
            shadowLooper.idleFor(Duration.ofMillis(millis))
        }

        /**
         * Use this method to click on BackButton. It will also advance the clock millis milliseconds and run
         * enqueued Runnable scheduled to run on main looper in that timeframe.
         * Default value for millis is 500
         *
         * Internally it calls activity.onBackPressed() and shadowLooper.idleFor(millis)
         */
        fun Activity.clickBackAndRun(millis: Long = 500) {
            this.onBackPressed()
            shadowLooper.idleFor(Duration.ofMillis(millis))
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> Activity.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", this.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> View.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", context.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        /**
         * Asserts that the last message toasted is the expectedMessage.
         * Assertion fails if no toast is shown with null actualLastMessage value.
         */
        fun assertLastToastMessageEquals(errorMessage: String, expectedMessage: String,) {
            val actualLastMessage: String? = ShadowToast.getTextOfLatestToast()
            assertEquals(errorMessage, expectedMessage, actualLastMessage)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/simplebankmanager/internals/SimpleBankManagerUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.simplebankmanager.internals

    import android.app.Activity
    import android.app.AlertDialog
    import android.widget.Button
    import android.widget.EditText
    import android.widget.Spinner
    import android.widget.TextView
    import org.junit.Assert.assertEquals
    import org.robolectric.Shadows.shadowOf

    open class SimpleBankManagerUnitTest<T : Activity>(clazz: Class<T>) : AbstractUnitTest<T>(clazz) {

        fun Button.assertButtonText(idString: String, expectedText: String, ignoreCase: Boolean = true) {
            assertTextEquals("Wrong text on $idString", expectedText, text, ignoreCase)
        }

        fun EditText.assertHintEditText(idString: String, expectedHint: String, ignoreCase: Boolean = true) {
            assertTextEquals("Wrong hint on $idString", expectedHint, this.hint, ignoreCase)
        }
        fun TextView.assertText(idString: String, expectedText: String, ignoreCase: Boolean = true) {
            assertTextEquals("Wrong text on $idString", expectedText, this.text, ignoreCase)
        }

        fun TextView.assertTextWithCustomErrorMessage(
            errorMessage: String, expectedText: String, ignoreCase: Boolean = true) {

            assertTextEquals(errorMessage, expectedText, this.text, ignoreCase)
        }

        fun EditText.assertEditText(
            idString: String,
            expectedHint: String,
            expectedType: Int,
            typeString: String,
            ignoreCase: Boolean = true) {

            this.assertHintEditText(idString, expectedHint, ignoreCase)
            val actualInputType = this.inputType
            assertEquals(
                "Wrong inputType on $idString should be $typeString",
                expectedType,
                actualInputType
            )
        }

        fun EditText.assertErrorText(errorMessage: String, expectedErrorText: String) {
            val actualErrorText = this.error?.toString()
            assertEquals(errorMessage, expectedErrorText, actualErrorText)
        }

        fun Spinner.assertSpinnerText(idString: String, expectedDropdownText: ArrayList<String>, ignoreCase: Boolean = true) {
            val items = ArrayList<String>()
            for (i in 0 until this.adapter.count) {
                items.add(this.adapter.getItem(i).toString())
            }
            val actualText = if(ignoreCase) items.toString().lowercase() else items.toString()
            assertEquals("Wrong text on $idString",  expectedDropdownText.toString(), actualText)
        }

        fun AlertDialog.assertDialogTitle(expectedTitle: String, ignoreCase: Boolean = false) {
            val shadowAlertDialog = shadowOf(this)
            val actualTitle = shadowAlertDialog.title

            assertTextEquals(
                "Wrong AlertDialog title", expectedTitle, actualTitle, ignoreCase
            )
        }
        fun AlertDialog.assertDialogMessage(expectedMessage: String, ignoreCase: Boolean = false) {
            val shadowAlertDialog = shadowOf(this)
            val actualMessage = shadowAlertDialog.message
            assertTextEquals("Wrong AlertDialog message", expectedMessage, actualMessage, ignoreCase)
        }
        fun AlertDialog.assertDialogVisibility(caseDescription: String, expectedVisible: Boolean) {
            val isDialogVisible = this.isShowing
            val messageError = "Dialog should %s be visible %s".format(
                if(expectedVisible) "" else "not",
                caseDescription
            )
            assertEquals(messageError,isDialogVisible, expectedVisible)
        }

        private fun String.normalizeCase(ignoreCase: Boolean): String {
            return if (ignoreCase) this.lowercase() else this
        }

        private fun CharSequence.normalizeCase(ignoreCase: Boolean): String {
            return this.toString().normalizeCase(ignoreCase)
        }

        private fun assertTextEquals(
            errorMessage: String,
            expectedText: CharSequence,
            actualText: CharSequence,
            ignoreCase: Boolean = true
        )  {
            val (expectedTextNorm, actualTextNorm) = listOf(expectedText, actualText)
                .map { it.normalizeCase(ignoreCase) }
            assertEquals(errorMessage, expectedTextNorm, actualTextNorm)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/simplebankmanager/Stage1UnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.simplebankmanager

    import android.content.Intent
    import org.hyperskill.simplebankmanager.internals.SimpleBankManagerUnitTest
    import org.hyperskill.simplebankmanager.internals.screen.LoginScreen
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.junit.runners.MethodSorters
    import org.robolectric.RobolectricTestRunner

    @RunWith(RobolectricTestRunner::class)
    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class Stage1UnitTest : SimpleBankManagerUnitTest<MainActivity>(MainActivity::class.java){


        @Test
        fun test00_checkLoginFragmentHasViews() {
            testActivity {
                LoginScreen(this)
            }
        }

        @Test
        fun test01_checkLoginWithDefaultValuesSucceed() {
            testActivity {
                LoginScreen(this).apply {
                    assertLogin(
                        caseDescription = "default values"
                    )
                }
            }
        }

        @Test
        fun test02_checkLoginWithDefaultValuesFailWithWrongName() {
            testActivity {
                LoginScreen(this).apply {
                    assertLogin(
                        caseDescription = "wrong username for default values",
                        username = "John",
                        isSucceeded = false
                    )
                }
            }
        }

        @Test
        fun test03_checkLoginWithDefaultValuesFailWithWrongPass() {
            testActivity {
                LoginScreen(this).apply {
                    assertLogin(
                        caseDescription = "wrong password for default values",
                        password = "1111",
                        isSucceeded = false
                    )
                }

            }
        }

        @Test
        fun test04_checkLoginWithCustomValuesSucceed() {
            val username = "Stella"
            val password = "0000"

            val args = Intent().apply {
                putExtra("username", username)
                putExtra("password", password)
            }

            testActivity(arguments = args) {
                LoginScreen(this).apply {
                    assertLogin(
                        caseDescription = "custom values",
                        username = username,
                        password = password
                    )
                }
            }
        }

        @Test
        fun test05_checkLoginWithCustomValuesFailWithWrongName() {
            val username = "Stella"
            val password = "0000"

            val args = Intent().apply {
                putExtra("username", username)
                putExtra("password", password)
            }

            testActivity(arguments = args) {
                LoginScreen(this).apply {
                    assertLogin(
                        caseDescription = "wrong username for custom values",
                        username = "John",
                        password = password,
                        isSucceeded = false
                    )
                }
            }
        }

        @Test
        fun test06_checkLoginWithCustomValuesFailWithWrongPass() {
            val username = "Stella"
            val password = "0000"

            val args = Intent().apply {
                putExtra("username", username)
                putExtra("password", password)
            }

            testActivity(arguments = args) {
                LoginScreen(this).apply {
                    assertLogin(
                        caseDescription = "wrong password for custom values",
                        username = username,
                        password = "9876",
                        isSucceeded = false
                    )
                }
            }
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'

    android {
        compileSdkVersion 31

        defaultConfig {
            applicationId "org.hyperskill.simplebankmanager"
            minSdkVersion hs.android.minSdkVersion
            targetSdkVersion hs.android.targetSdkVersion
            versionCode 1
            versionName '1.0'
        }

        buildFeatures {
            viewBinding true
        }
    }

    dependencies {

        def kotlinVersion = hs.android.kotlinVersion
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        def coreKtx = hs.android.lib.coreKtx
        implementation "androidx.core:core-ktx:$coreKtx"

        def appCompat = hs.android.lib.appCompat
        implementation "androidx.appcompat:appcompat:$appCompat"

        def constraintLayout = hs.android.lib.constraintLayout
        implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"

        def material = hs.android.lib.material
        implementation "com.google.android.material:material:$material"

        def navigationVersion = '2.4.2'
        implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
        implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    }
  learner_created: false
- name: src/main/res/navigation/nav_graph.xml
  visible: true
  learner_created: true
- name: src/main/res/layout/fragment_login.xml
  visible: true
  learner_created: true
- name: src/main/java/org/hyperskill/simplebankmanager/LoginFragment.kt
  visible: true
  learner_created: true
- name: src/main/res/layout/fragment_user_menu.xml
  visible: true
  learner_created: true
- name: src/main/java/org/hyperskill/simplebankmanager/UserMenuFragment.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/27105#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 05 May 2023 14:53:33 UTC"
record: 1
